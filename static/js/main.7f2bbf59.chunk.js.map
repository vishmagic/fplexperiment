{"version":3,"sources":["components/Club/Club.js","components/Scroll/Scroll.js","components/ClubList/ClubList.js","components/Player/Player.js","components/PlayerList/PlayerList.js","components/Logo/4_fplLogo.svg","components/Logo/Logo.js","components/Navigation/Navigation.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Club","clubData","map","data","className","name","short","points","fdr","attack","gscored","assist","defence","saves","cleansht","gconcede","yellow","csPercentage","gcPercentage","savePercentage","attgR","key","Scroll","props","route","style","overflowY","width","height","children","computeGoals","teamid","sumGoal","cList","filter","item","team","j","length","goals_scored","computeAssists","sumAssist","assists","computePoints","sumPoints","total_points","computeSaves","sumSaves","element_type","computeCSheet","sumCSheet","clean_sheets","computeCSP","Math","round","computeGC","sumGC","goals_conceded","computeGCP","computeSavP","computeYelo","sumYellow","yellow_cards","pointSort","a","b","csSort","saveSort","attRSort","ClubList","playerData","sortCSData","sortSaveData","sortAttRData","clubs","players","sortPts","sortCS","sortS","sortAR","clubTable","index","ovrGoal","id","ovrAssist","ovrPoint","ovrSaves","ovrCleanSheets","ovrGC","numYellow","percentCS","percentGC","percentSav","agr","strength_attack_home","strength_attack_away","toFixed","aar","dcr","strength_defence_home","strength_defence_away","dsr","short_name","strength","ceil","attaR","defcR","defsR","sort","clubtbHead","clubStat","attackG","Number","attackA","defenceC","defenceS","indexAAR","indexOf","min","indexAGR","indexDSR","indexDCR","teamGR","teamAR","teamCR","teamSR","minattgR","teamAttGR","minattaR","teamAttAR","mindefcR","teamDefCR","mindefsR","teamDefSR","computeStat","console","log","Player","pos","val","pts","penmiss","owngoal","mapPos","mapTeam","gsSort","aSort","PlayerList","sortPointData","sortGSData","sortAData","sortSavesData","sortGS","sortA","sortSaves","playerTable","web_name","position","pTeam","value","now_cost","minutes","gs","pMiss","penalties_missed","gc","og","own_goals","yc","ptsgame","gsgame","agame","gsaratio","ptpergame","gspergame","apergame","gstoassist","playertbHead","playerStat","playerPts","playerG","playerA","playerO","isFinite","indexPP","max","indexPG","indexPA","indexPO","PP","PG","PA","PO","maxPP","playerPP","maxPG","playerPG","maxPA","playerPA","maxPO","playerPO","Logo","alt","src","Icon","Navigation","onRouteChange","onClick","App","useState","setUsers","setPlayers","setRoute","sortPoints","setsortPoints","setsortCS","setsortSaves","sortAttR","setsortAttR","setsortGS","setsortA","useEffect","fetch","then","response","json","userList","teams","elements","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f2bbf59.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Club.css';\r\n\r\nconst Club = ({clubData}) => {\r\n    return (\r\n        clubData.map((data) => {\r\n            return (\r\n            <tr key={data.key}>\r\n                <td className = 'club-name tb_text'>{data.name}</td>\r\n                <td className = 'tb_text'>{data.short}</td>\r\n                <td className = 'tb_num'>{data.points}</td>\r\n                <td className = 'tb_num'>{data.fdr}</td>\r\n                <td className = 'tb_num'>{data.attack}</td>\r\n                <td className = 'tb_num'>{data.gscored}</td>\r\n                <td className = 'tb_num'>{data.assist}</td> \r\n                <td className = 'tb_num'>{data.defence}</td>\r\n                <td className = 'tb_num'>{data.saves}</td>\r\n                <td className = 'tb_num'>{data.cleansht}</td>\r\n                <td className = 'tb_num'>{data.gconcede}</td>\r\n                <td className = 'tb_num'>{data.yellow}</td>\r\n                <td className = 'tb_num'>{data.csPercentage}</td>\r\n                <td className = 'tb_num'>{data.gcPercentage}</td>\r\n                <td className = 'tb_num'>{data.savePercentage}</td>\r\n                <td className = 'tb_num'>{data.attgR}</td>\r\n            </tr>\r\n            )\r\n        })\r\n    );\r\n}\r\n\r\nexport default Club;","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props) => {\r\n    \r\n    if (props.route === 'club') {\r\n        return (\r\n            <div className = 'ovrScroll' style = {{overflowY: 'scroll', width: '80%', height: '60%'}}>\r\n                {props.children}\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className = 'ovrScroll' style = {{overflowY: 'scroll', width: '80%', height: '1.8%'}}>\r\n                {props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport Club from '../Club/Club';\r\nimport StatsClub from '../StatsClub/StatsClub';\r\nimport Scroll from '../Scroll/Scroll';\r\n\r\nimport './ClubList.css';\r\n\r\n//function to return total goals scored by players from a club\r\nlet computeGoals = (teamid, data) => {\r\n    let sumGoal = 0\r\n    let cList = data.filter(item => {\r\n            return item.team === teamid;\r\n        })\r\n    for(let j=0;j<cList.length;j++) {\r\n        sumGoal = sumGoal + cList[j].goals_scored;\r\n    }\r\n    return sumGoal;\r\n}\r\n\r\n//function to return total assists given by players from a club\r\nlet computeAssists = (teamid, data) => {\r\n    let sumAssist = 0\r\n    let cList = data.filter(item => {\r\n            return item.team === teamid;\r\n        })\r\n    for(let j=0;j<cList.length;j++) {\r\n        sumAssist = sumAssist + cList[j].assists;\r\n    }\r\n    return sumAssist;\r\n}\r\n\r\n//function to return total points earned by players from a club\r\nlet computePoints = (teamid, data) => {\r\n    let sumPoints = 0\r\n    let cList = data.filter(item => {\r\n            return item.team === teamid;\r\n        })\r\n    for(let j=0;j<cList.length;j++) {\r\n        sumPoints = sumPoints + cList[j].total_points;\r\n    }\r\n    return sumPoints;\r\n}\r\n\r\n//function to return total saves by players(gk) from a club\r\nlet computeSaves = (teamid, data) => {\r\n    let sumSaves = 0\r\n    let cList = data.filter(item => {\r\n            return (item.team === teamid && item.element_type === 1);\r\n        })\r\n    for(let j=0;j<cList.length;j++) {\r\n        sumSaves = sumSaves + cList[j].saves;\r\n    }\r\n    return sumSaves;\r\n}\r\n\r\n//function to return total clean sheets by players(gk) from a club\r\nlet computeCSheet = (teamid, data) => {\r\n    let sumCSheet = 0\r\n    let cList = data.filter(item => {\r\n            return (item.team === teamid && item.element_type === 1);\r\n        })\r\n    for(let j=0;j<cList.length;j++) {\r\n        sumCSheet = sumCSheet + cList[j].clean_sheets;\r\n    }\r\n    return sumCSheet;\r\n}\r\n\r\n// function to return total clean sheets by players(gk) from a club in percentage\r\n// count of CS/38 * 100\r\nlet computeCSP = (teamid, data) => {\r\n    let sumCSheet = 0\r\n    let cList = data.filter(item => {\r\n            return (item.team === teamid && item.element_type === 1);\r\n        })\r\n    for(let j=0;j<cList.length;j++) {\r\n        sumCSheet = sumCSheet + cList[j].clean_sheets;\r\n    }\r\n    return Math.round((sumCSheet/38)*100);\r\n}\r\n\r\n// function to return total goals conceded by players(gk) from a club\r\nlet computeGC = (teamid, data) => {\r\n    let sumGC = 0\r\n    let cList = data.filter(item => {\r\n            return (item.team === teamid && item.element_type === 1);\r\n        })\r\n    for(let j=0;j<cList.length;j++) {\r\n        sumGC = sumGC + cList[j].goals_conceded;\r\n    }\r\n    return sumGC;\r\n}\r\n\r\n// function to return total goals conceded by players(gk) from a club in percentage\r\n// count of GC/sum of GC + Saves * 100\r\nlet computeGCP = (teamid, data) => {\r\n    let sumGC = 0\r\n    let sumSaves = 0\r\n    let cList = data.filter(item => {\r\n            return (item.team === teamid && item.element_type === 1);\r\n        })\r\n    for(let j=0;j<cList.length;j++) {\r\n        sumGC = sumGC + cList[j].goals_conceded;\r\n        sumSaves = sumSaves + cList[j].saves;\r\n    }\r\n    return Math.round((sumGC/(sumGC + sumSaves))*100);\r\n}\r\n\r\n// function to return total saves by players(gk) from a club in percentage\r\n// 100% - percentage GC\r\nlet computeSavP = (teamid, data) => {\r\n    let sumGC = 0\r\n    let sumSaves = 0\r\n    let cList = data.filter(item => {\r\n            return (item.team === teamid && item.element_type === 1);\r\n        })\r\n    for(let j=0;j<cList.length;j++) {\r\n        sumGC = sumGC + cList[j].goals_conceded;\r\n        sumSaves = sumSaves + cList[j].saves;\r\n    }\r\n    return (100 - Math.round((sumGC/(sumGC + sumSaves))*100));\r\n}\r\n\r\n// function to return total yellowcards conceded by players from a club\r\nlet computeYelo = (teamid, data) => {\r\n    let sumYellow = 0\r\n    let cList = data.filter(item => {\r\n        return (item.team === teamid);\r\n    })\r\n    for(let j=0;j<cList.length;j++) {\r\n        sumYellow = sumYellow + cList[j].yellow_cards;\r\n    }\r\n    return sumYellow\r\n}\r\n\r\n// function to sort the table/object - the only way for this to work is to pass sort field\r\n// when clubTable is created => there has to be a separate button for sorting to make this work\r\n// we have to retun a sorted table object for render    \r\nfunction pointSort(a, b){\r\n    // a should come before b in the sorted order\r\n    if(a.points < b.points){\r\n        return 1;\r\n    // a should come after b in the sorted order\r\n    }else if(a.points > b.points){\r\n        return -1;\r\n    // a and b are the same\r\n    }else{\r\n        return 0;\r\n    }\r\n}\r\n\r\n// function to sort the table/object - the only way for this to work is to pass sort field\r\n// when clubTable is created => there has to be a separate button for sorting to make this work\r\n// we have to retun a sorted table object for render    \r\nfunction csSort(a, b){\r\n    // a should come before b in the sorted order\r\n    if(a.csPercentage < b.csPercentage){\r\n        return 1;\r\n    // a should come after b in the sorted order\r\n    }else if(a.csPercentage > b.csPercentage){\r\n        return -1;\r\n    // a and b are the same\r\n    }else{\r\n        return 0;\r\n    }\r\n}\r\n\r\n// function to sort the table/object - the only way for this to work is to pass sort field\r\n// when clubTable is created => there has to be a separate button for sorting to make this work\r\n// we have to retun a sorted table object for render    \r\nfunction saveSort(a, b){\r\n    // a should come before b in the sorted order\r\n    if(a.savePercentage < b.savePercentage){\r\n        return 1;\r\n    // a should come after b in the sorted order\r\n    }else if(a.savePercentage > b.savePercentage){\r\n        return -1;\r\n    // a and b are the same\r\n    }else{\r\n        return 0;\r\n    }\r\n}\r\n\r\n// function to sort the table/object - the only way for this to work is to pass sort field\r\n// when clubTable is created => there has to be a separate button for sorting to make this work\r\n// we have to retun a sorted table object for render    \r\nfunction attRSort(a, b){\r\n    // a should come before b in the sorted order\r\n    if(a.attgR > b.attgR){\r\n        return 1;\r\n    // a should come after b in the sorted order\r\n    }else if(a.attgR < b.attgR){\r\n        return -1;\r\n    // a and b are the same\r\n    }else{\r\n        return 0;\r\n    }\r\n}\r\n\r\n//Compute and store club table data into an object\r\n//sortCS, sortSave, sortAttR\r\nlet computeTable = (clubData, playerData, sortPointData, sortCSData, sortSaveData, sortAttRData) => {\r\n    //map around the club data and compute rest of stuff\r\n    if (sortPointData === true) {\r\n        let tempTable = clubData.map((data, index) => {\r\n            let ovrGoal = computeGoals(data.id, playerData)\r\n            let ovrAssist = computeAssists(data.id, playerData)\r\n            let ovrPoint = computePoints(data.id, playerData)\r\n            let ovrSaves = computeSaves(data.id, playerData)\r\n            let ovrCleanSheets = computeCSheet(data.id, playerData)\r\n            let ovrGC = computeGC(data.id, playerData)\r\n            let numYellow = computeYelo(data.id, playerData)\r\n            let percentCS = computeCSP(data.id, playerData)\r\n            let percentGC = computeGCP(data.id, playerData)\r\n            let percentSav = computeSavP(data.id, playerData)\r\n            let agr = (((data.strength_attack_home+data.strength_attack_away)/2)/ovrGoal).toFixed(2)\r\n            let aar = (((data.strength_attack_home+data.strength_attack_away)/2)/ovrAssist).toFixed(2)\r\n            let dcr = (((data.strength_defence_home+data.strength_defence_away)/2)/ovrCleanSheets).toFixed(2)\r\n            let dsr = (((data.strength_defence_home+data.strength_defence_away)/2)/ovrSaves).toFixed(2)\r\n    \r\n            return {\r\n                key: index,\r\n                name: data.name,\r\n                short: data.short_name,\r\n                fdr: data.strength,\r\n                attack: Math.ceil((data.strength_attack_home+data.strength_attack_away)/2),\r\n                defence: Math.ceil((data.strength_defence_home+data.strength_defence_away)/2),\r\n                gscored: ovrGoal,\r\n                assist: ovrAssist,\r\n                points: ovrPoint,\r\n                saves: ovrSaves,\r\n                cleansht: ovrCleanSheets,\r\n                gconcede: ovrGC,\r\n                yellow: numYellow,\r\n                csPercentage: percentCS,\r\n                gcPercentage: percentGC,\r\n                savePercentage: percentSav,\r\n                attgR: agr,\r\n                attaR: aar,\r\n                defcR: dcr,\r\n                defsR: dsr\r\n            }\r\n        })\r\n        return tempTable.sort(pointSort)\r\n    } else if (sortCSData === true) {\r\n        let tempTable = clubData.map((data, index) => {\r\n            let ovrGoal = computeGoals(data.id, playerData)\r\n            let ovrAssist = computeAssists(data.id, playerData)\r\n            let ovrPoint = computePoints(data.id, playerData)\r\n            let ovrSaves = computeSaves(data.id, playerData)\r\n            let ovrCleanSheets = computeCSheet(data.id, playerData)\r\n            let ovrGC = computeGC(data.id, playerData)\r\n            let numYellow = computeYelo(data.id, playerData)\r\n            let percentCS = computeCSP(data.id, playerData)\r\n            let percentGC = computeGCP(data.id, playerData)\r\n            let percentSav = computeSavP(data.id, playerData)\r\n            let agr = (((data.strength_attack_home+data.strength_attack_away)/2)/ovrGoal).toFixed(2)\r\n            let aar = (((data.strength_attack_home+data.strength_attack_away)/2)/ovrAssist).toFixed(2)\r\n            let dcr = (((data.strength_defence_home+data.strength_defence_away)/2)/ovrCleanSheets).toFixed(2)\r\n            let dsr = (((data.strength_defence_home+data.strength_defence_away)/2)/ovrSaves).toFixed(2)\r\n    \r\n            return {\r\n                key: index,\r\n                name: data.name,\r\n                short: data.short_name,\r\n                fdr: data.strength,\r\n                attack: Math.ceil((data.strength_attack_home+data.strength_attack_away)/2),\r\n                defence: Math.ceil((data.strength_defence_home+data.strength_defence_away)/2),\r\n                gscored: ovrGoal,\r\n                assist: ovrAssist,\r\n                points: ovrPoint,\r\n                saves: ovrSaves,\r\n                cleansht: ovrCleanSheets,\r\n                gconcede: ovrGC,\r\n                yellow: numYellow,\r\n                csPercentage: percentCS,\r\n                gcPercentage: percentGC,\r\n                savePercentage: percentSav,\r\n                attgR: agr,\r\n                attaR: aar,\r\n                defcR: dcr,\r\n                defsR: dsr\r\n            }\r\n        })\r\n        return tempTable.sort(csSort)\r\n    } else if (sortSaveData === true) {\r\n        let tempTable = clubData.map((data, index) => {\r\n            let ovrGoal = computeGoals(data.id, playerData)\r\n            let ovrAssist = computeAssists(data.id, playerData)\r\n            let ovrPoint = computePoints(data.id, playerData)\r\n            let ovrSaves = computeSaves(data.id, playerData)\r\n            let ovrCleanSheets = computeCSheet(data.id, playerData)\r\n            let ovrGC = computeGC(data.id, playerData)\r\n            let numYellow = computeYelo(data.id, playerData)\r\n            let percentCS = computeCSP(data.id, playerData)\r\n            let percentGC = computeGCP(data.id, playerData)\r\n            let percentSav = computeSavP(data.id, playerData)\r\n            let agr = (((data.strength_attack_home+data.strength_attack_away)/2)/ovrGoal).toFixed(2)\r\n            let aar = (((data.strength_attack_home+data.strength_attack_away)/2)/ovrAssist).toFixed(2)\r\n            let dcr = (((data.strength_defence_home+data.strength_defence_away)/2)/ovrCleanSheets).toFixed(2)\r\n            let dsr = (((data.strength_defence_home+data.strength_defence_away)/2)/ovrSaves).toFixed(2)\r\n    \r\n            return {\r\n                key: index,\r\n                name: data.name,\r\n                short: data.short_name,\r\n                fdr: data.strength,\r\n                attack: Math.ceil((data.strength_attack_home+data.strength_attack_away)/2),\r\n                defence: Math.ceil((data.strength_defence_home+data.strength_defence_away)/2),\r\n                gscored: ovrGoal,\r\n                assist: ovrAssist,\r\n                points: ovrPoint,\r\n                saves: ovrSaves,\r\n                cleansht: ovrCleanSheets,\r\n                gconcede: ovrGC,\r\n                yellow: numYellow,\r\n                csPercentage: percentCS,\r\n                gcPercentage: percentGC,\r\n                savePercentage: percentSav,\r\n                attgR: agr,\r\n                attaR: aar,\r\n                defcR: dcr,\r\n                defsR: dsr\r\n            }\r\n        })\r\n        return tempTable.sort(saveSort)\r\n    } else if (sortAttRData === true) {\r\n        let tempTable = clubData.map((data, index) => {\r\n            let ovrGoal = computeGoals(data.id, playerData)\r\n            let ovrAssist = computeAssists(data.id, playerData)\r\n            let ovrPoint = computePoints(data.id, playerData)\r\n            let ovrSaves = computeSaves(data.id, playerData)\r\n            let ovrCleanSheets = computeCSheet(data.id, playerData)\r\n            let ovrGC = computeGC(data.id, playerData)\r\n            let numYellow = computeYelo(data.id, playerData)\r\n            let percentCS = computeCSP(data.id, playerData)\r\n            let percentGC = computeGCP(data.id, playerData)\r\n            let percentSav = computeSavP(data.id, playerData)\r\n            let agr = (((data.strength_attack_home+data.strength_attack_away)/2)/ovrGoal).toFixed(2)\r\n            let aar = (((data.strength_attack_home+data.strength_attack_away)/2)/ovrAssist).toFixed(2)\r\n            let dcr = (((data.strength_defence_home+data.strength_defence_away)/2)/ovrCleanSheets).toFixed(2)\r\n            let dsr = (((data.strength_defence_home+data.strength_defence_away)/2)/ovrSaves).toFixed(2)\r\n    \r\n            return {\r\n                key: index,\r\n                name: data.name,\r\n                short: data.short_name,\r\n                fdr: data.strength,\r\n                attack: Math.ceil((data.strength_attack_home+data.strength_attack_away)/2),\r\n                defence: Math.ceil((data.strength_defence_home+data.strength_defence_away)/2),\r\n                gscored: ovrGoal,\r\n                assist: ovrAssist,\r\n                points: ovrPoint,\r\n                saves: ovrSaves,\r\n                cleansht: ovrCleanSheets,\r\n                gconcede: ovrGC,\r\n                yellow: numYellow,\r\n                csPercentage: percentCS,\r\n                gcPercentage: percentGC,\r\n                savePercentage: percentSav,\r\n                attgR: agr,\r\n                attaR: aar,\r\n                defcR: dcr,\r\n                defsR: dsr\r\n            }\r\n        })\r\n        return tempTable.sort(attRSort)\r\n    } else {\r\n        return clubData.map((data, index) => {\r\n            let ovrGoal = computeGoals(data.id, playerData)\r\n            let ovrAssist = computeAssists(data.id, playerData)\r\n            let ovrPoint = computePoints(data.id, playerData)\r\n            let ovrSaves = computeSaves(data.id, playerData)\r\n            let ovrCleanSheets = computeCSheet(data.id, playerData)\r\n            let ovrGC = computeGC(data.id, playerData)\r\n            let numYellow = computeYelo(data.id, playerData)\r\n            let percentCS = computeCSP(data.id, playerData)\r\n            let percentGC = computeGCP(data.id, playerData)\r\n            let percentSav = computeSavP(data.id, playerData)\r\n            let agr = (((data.strength_attack_home+data.strength_attack_away)/2)/ovrGoal).toFixed(2)\r\n            let aar = (((data.strength_attack_home+data.strength_attack_away)/2)/ovrAssist).toFixed(2)\r\n            let dcr = (((data.strength_defence_home+data.strength_defence_away)/2)/ovrCleanSheets).toFixed(2)\r\n            let dsr = (((data.strength_defence_home+data.strength_defence_away)/2)/ovrSaves).toFixed(2)\r\n\r\n            return {\r\n                key: index,\r\n                name: data.name,\r\n                short: data.short_name,\r\n                fdr: data.strength,\r\n                attack: Math.ceil((data.strength_attack_home+data.strength_attack_away)/2),\r\n                defence: Math.ceil((data.strength_defence_home+data.strength_defence_away)/2),\r\n                gscored: ovrGoal,\r\n                assist: ovrAssist,\r\n                points: ovrPoint,\r\n                saves: ovrSaves,\r\n                cleansht: ovrCleanSheets,\r\n                gconcede: ovrGC,\r\n                yellow: numYellow,\r\n                csPercentage: percentCS,\r\n                gcPercentage: percentGC,\r\n                savePercentage: percentSav,\r\n                attgR: agr,\r\n                attaR: aar,\r\n                defcR: dcr,\r\n                defsR: dsr\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n//Computing min and max values for specific columns - for report card\r\nlet computeStat = (clubTable) => {\r\n    // get array of attack goal ratio\r\n    let attackG = clubTable.map((data) => {\r\n        return Number(data.attgR);\r\n    })\r\n    \r\n    // get array of attack assist ratio\r\n    let attackA = clubTable.map((data) => {\r\n        return Number(data.attaR)\r\n    })\r\n\r\n    // get array of defence cs ratio\r\n    let defenceC = clubTable.map((data) => {\r\n        return Number(data.defcR)\r\n    })\r\n\r\n    // get array of defence save ratio\r\n    let defenceS = clubTable.map((data) => {\r\n        return Number(data.defsR)\r\n    })\r\n\r\n    // get the index of all the min ratios\r\n    let indexAAR = attackA.indexOf(Math.min(...attackA));\r\n    let indexAGR = attackG.indexOf(Math.min(...attackG));\r\n    let indexDSR = defenceS.indexOf(Math.min(...defenceS));\r\n    let indexDCR = defenceC.indexOf(Math.min(...defenceC));\r\n\r\n    // get team corresponding to the indices\r\n    let teamGR = clubTable[indexAGR].short;\r\n    let teamAR = clubTable[indexAAR].short;\r\n    let teamCR = clubTable[indexDCR].short;\r\n    let teamSR = clubTable[indexDSR].short;\r\n\r\n    // now that we have the arrays, compute corresponding min, max and index\r\n    // return just attack and defence team name, short name, min and max values\r\n    return {\r\n        minattgR: Math.min(...attackG), // note that Math.min works with arrays by ... destructuring\r\n        teamAttGR: teamGR,\r\n        minattaR: Math.min(...attackA),\r\n        teamAttAR: teamAR,\r\n        mindefcR: Math.min(...defenceC),\r\n        teamDefCR: teamCR, \r\n        mindefsR: Math.min(...defenceS),\r\n        teamDefSR: teamSR\r\n    }\r\n}\r\n\r\n//Data renderer\r\nconst ClubList = ({clubs, players, sortPts, sortCS, sortS, sortAR, route}) => {\r\n    \r\n    //Create the table as an object to be passed to Card Component\r\n    let clubTable = computeTable(clubs, players, sortPts, sortCS, sortS, sortAR)\r\n    const clubtbHead = ['Club','Short','Points','FDR','Attack','GS','A','Defence','Saves','CS','GC','Yellow Cards', '% CS', '% GC', '% Saves', 'Attack Ratio']\r\n    \r\n    //The array stores name of the analysis perspective to understand team and player impact\r\n    let clubStat = computeStat(clubTable)\r\n    console.log(clubStat)\r\n\r\n    //Rendering the Club table\r\n    return (\r\n        <div className = 'fpl_clubInfo'>\r\n            <div className = 'fpl_clubReport'>\r\n                <div className = 'fpl_clubAtt'>\r\n                    <span><p>{clubStat.teamAttGR}</p><p>{clubStat.minattgR}</p></span>\r\n                    <span><p>{clubStat.teamAttAR}</p><p>{clubStat.minattaR}</p></span>\r\n                </div>\r\n                <div className = 'fpl_clubDef'>\r\n                    <span><p>{clubStat.teamDefCR}</p><p>{clubStat.mindefcR}</p></span>\r\n                    <span><p>{clubStat.teamDefSR}</p><p>{clubStat.mindefsR}</p></span>\r\n                </div>\r\n            </div>\r\n        <Scroll route = {route}>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th className = 'tb_text'>{clubtbHead[0]}</th>\r\n                        <th className = 'tb_text'>{clubtbHead[1]}</th>\r\n                        <th className = 'tb_num' >{clubtbHead[2]}</th>\r\n                        <th className = 'tb_num'>{clubtbHead[3]}</th>\r\n                        <th className = 'tb_num'>{clubtbHead[4]}</th>\r\n                        <th className = 'tb_num'>{clubtbHead[5]}</th>\r\n                        <th className = 'tb_num'>{clubtbHead[6]}</th>\r\n                        <th className = 'tb_num'>{clubtbHead[7]}</th>\r\n                        <th className = 'tb_num'>{clubtbHead[8]}</th>\r\n                        <th className = 'tb_num'>{clubtbHead[9]}</th>\r\n                        <th className = 'tb_num'>{clubtbHead[10]}</th>\r\n                        <th className = 'tb_num'>{clubtbHead[11]}</th>\r\n                        <th className = 'tb_num'>{clubtbHead[12]}</th>\r\n                        <th className = 'tb_num'>{clubtbHead[13]}</th>\r\n                        <th className = 'tb_num'>{clubtbHead[14]}</th>\r\n                        <th className = 'tb_num'>{clubtbHead[15]}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>  \r\n                    <Club clubData = {clubTable} />\r\n                </tbody>\r\n            </table>\r\n        </Scroll>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClubList;","import React from 'react';\r\nimport './Player.css';\r\n\r\nconst Player = ({playerData}) => {\r\n    return (\r\n        playerData.map((data) => {\r\n            return (\r\n            <tr key={data.key}>\r\n                <td className = 'club-name tb_text'>{data.name}</td>\r\n                <td className = 'tb_text'>{data.pos}</td>\r\n                <td className = 'tb_text'>{data.team}</td>\r\n                <td className = 'tb_num'>{data.val}</td>\r\n                <td className = 'tb_num'>{data.pts}</td>\r\n                <td className = 'tb_num'>{data.min}</td>\r\n                <td className = 'tb_num'>{data.gscored}</td>\r\n                <td className = 'tb_num'>{data.assist}</td> \r\n                <td className = 'tb_num'>{data.penmiss}</td>\r\n                <td className = 'tb_num'>{data.saves}</td>\r\n                <td className = 'tb_num'>{data.gconcede}</td>\r\n                <td className = 'tb_num'>{data.owngoal}</td>\r\n                <td className = 'tb_num'>{data.yellow}</td>\r\n            </tr>\r\n            )\r\n        })\r\n    );\r\n}\r\n\r\nexport default Player;","import React from 'react';\r\nimport Player from '../Player/Player';\r\nimport Scroll from '../Scroll/Scroll';\r\n\r\nimport './PlayerList.css';\r\n\r\nlet mapPos = (data) => {\r\n    if (data === 1) {\r\n        return \"GKP\";\r\n    } else if (data === 2) {\r\n        return \"DEF\"\r\n    } else if (data === 3) {\r\n        return \"MID\"\r\n    } else {\r\n        return \"FWD\"\r\n    }\r\n}\r\n\r\nlet mapTeam = (data) => {\r\n    //switch case to associate team\r\n    switch(data) {\r\n        case 1:\r\n            return \"ARS\";\r\n        case 2:\r\n            return \"AVL\";\r\n        case 3:\r\n            return \"BHA\";\r\n        case 4:\r\n            return \"BUR\";\r\n        case 5:\r\n            return \"CHE\";\r\n        case 6:\r\n            return \"CRY\";\r\n        case 7:\r\n            return \"EVE\";\r\n        case 8:\r\n            return \"FUL\";\r\n        case 9:\r\n            return \"LEI\";\r\n        case 10:\r\n            return \"LEE\";\r\n        case 11:\r\n            return \"LIV\";\r\n        case 12:\r\n            return \"MCI\";\r\n        case 13:\r\n            return \"MUN\";\r\n        case 14:\r\n            return \"NEW\";\r\n        case 15:\r\n            return \"SHU\";\r\n        case 16:\r\n            return \"SOU\";\r\n        case 17:\r\n            return \"TOT\";\r\n        case 18:\r\n            return \"WBA\";\r\n        case 19:\r\n            return \"WHU\";\r\n        case 20:\r\n            return \"WOL\";\r\n    }\r\n}\r\n\r\nfunction pointSort(a, b){\r\n    // a should come before b in the sorted order\r\n    if(a.pts < b.pts){\r\n        return 1;\r\n    // a should come after b in the sorted order\r\n    }else if(a.pts > b.pts){\r\n        return -1;\r\n    // a and b are the same\r\n    }else{\r\n        return 0;\r\n    }\r\n}\r\n\r\n// function to sort the table/object - the only way for this to work is to pass sort field\r\n// when clubTable is created => there has to be a separate button for sorting to make this work\r\n// we have to retun a sorted table object for render    \r\nfunction gsSort(a, b){\r\n    // a should come before b in the sorted order\r\n    if(a.gscored < b.gscored){\r\n        return 1;\r\n    // a should come after b in the sorted order\r\n    }else if(a.gscored > b.gscored){\r\n        return -1;\r\n    // a and b are the same\r\n    }else{\r\n        return 0;\r\n    }\r\n}\r\n\r\n// function to sort the table/object - the only way for this to work is to pass sort field\r\n// when clubTable is created => there has to be a separate button for sorting to make this work\r\n// we have to retun a sorted table object for render    \r\nfunction aSort(a, b){\r\n    // a should come before b in the sorted order\r\n    if(a.assist < b.assist){\r\n        return 1;\r\n    // a should come after b in the sorted order\r\n    }else if(a.assist > b.assist){\r\n        return -1;\r\n    // a and b are the same\r\n    }else{\r\n        return 0;\r\n    }\r\n}\r\n\r\n// function to sort the table/object - the only way for this to work is to pass sort field\r\n// when clubTable is created => there has to be a separate button for sorting to make this work\r\n// we have to retun a sorted table object for render    \r\nfunction saveSort(a, b){\r\n    // a should come before b in the sorted order\r\n    if(a.saves < b.saves){\r\n        return 1;\r\n    // a should come after b in the sorted order\r\n    }else if(a.saves > b.saves){\r\n        return -1;\r\n    // a and b are the same\r\n    }else{\r\n        return 0;\r\n    }\r\n}\r\n\r\n//Data renderer\r\nlet computeTable = (playerData, sortPointData, sortGSData, sortAData, sortSavesData) => {\r\n    //map around the player data and compute rest of stuff\r\n    //Points','Min','GS','A','Pen Missed','Saves','GC','OG','Yellow Cards', 'Pen order'\r\n    if (sortPointData === true) {\r\n        let tempTable = playerData.map((data, index) => {\r\n            let name = data.web_name\r\n            let position = mapPos(data.element_type)\r\n            let pTeam = mapTeam(data.team)\r\n            let value = data.now_cost/10        \r\n            let points = data.total_points\r\n            let minutes = data.minutes\r\n            let gs = data.goals_scored\r\n            let assist = data.assists\r\n            let pMiss = data.penalties_missed\r\n            let saves = data.saves\r\n            let gc = data.goals_conceded\r\n            let og = data.own_goals\r\n            let yc = data.yellow_cards       \r\n            let ptsgame = (data.total_points/38).toFixed(2)\r\n            let gsgame = (data.goals_scored/38).toFixed(2)\r\n            let agame = (data.assists/38).toFixed(2)\r\n            let gsaratio = ((data.goals_scored+data.assists)/38).toFixed(2)\r\n    \r\n            console.log(sortPointData);\r\n    \r\n            return {\r\n                key: index,\r\n                name: name,\r\n                pos: position,\r\n                team: pTeam,\r\n                val: value,\r\n                pts: points,\r\n                min: minutes,\r\n                gscored: gs,\r\n                assist: assist,\r\n                penmiss: pMiss,\r\n                saves: saves,\r\n                gconcede: gc,\r\n                owngoal: og,\r\n                yellow: yc,\r\n                ptpergame: ptsgame,\r\n                gspergame: gsgame,\r\n                apergame: agame,\r\n                gstoassist: gsaratio\r\n            }\r\n        })\r\n        return tempTable.sort(pointSort)\r\n    } else if (sortGSData === true) {\r\n        let tempTable = playerData.map((data, index) => {\r\n            let name = data.web_name\r\n            let position = mapPos(data.element_type)\r\n            let pTeam = mapTeam(data.team)\r\n            let value = data.now_cost/10        \r\n            let points = data.total_points\r\n            let minutes = data.minutes\r\n            let gs = data.goals_scored\r\n            let assist = data.assists\r\n            let pMiss = data.penalties_missed\r\n            let saves = data.saves\r\n            let gc = data.goals_conceded\r\n            let og = data.own_goals\r\n            let yc = data.yellow_cards       \r\n            let ptsgame = (data.total_points/38).toFixed(2)\r\n            let gsgame = (data.goals_scored/38).toFixed(2)\r\n            let agame = (data.assists/38).toFixed(2)\r\n            let gsaratio = ((data.goals_scored+data.assists)/38).toFixed(2)\r\n    \r\n            console.log(sortGSData);\r\n    \r\n            return {\r\n                key: index,\r\n                name: name,\r\n                pos: position,\r\n                team: pTeam,\r\n                val: value,\r\n                pts: points,\r\n                min: minutes,\r\n                gscored: gs,\r\n                assist: assist,\r\n                penmiss: pMiss,\r\n                saves: saves,\r\n                gconcede: gc,\r\n                owngoal: og,\r\n                yellow: yc,\r\n                ptpergame: ptsgame,\r\n                gspergame: gsgame,\r\n                apergame: agame,\r\n                gstoassist: gsaratio\r\n            }\r\n        })\r\n        return tempTable.sort(gsSort)\r\n    } else if (sortAData === true) {\r\n        let tempTable = playerData.map((data, index) => {\r\n            let name = data.web_name\r\n            let position = mapPos(data.element_type)\r\n            let pTeam = mapTeam(data.team)\r\n            let value = data.now_cost/10        \r\n            let points = data.total_points\r\n            let minutes = data.minutes\r\n            let gs = data.goals_scored\r\n            let assist = data.assists\r\n            let pMiss = data.penalties_missed\r\n            let saves = data.saves\r\n            let gc = data.goals_conceded\r\n            let og = data.own_goals\r\n            let yc = data.yellow_cards       \r\n            let ptsgame = (data.total_points/38).toFixed(2)\r\n            let gsgame = (data.goals_scored/38).toFixed(2)\r\n            let agame = (data.assists/38).toFixed(2)\r\n            let gsaratio = ((data.goals_scored+data.assists)/38).toFixed(2)\r\n    \r\n            console.log(sortAData);\r\n    \r\n            return {\r\n                key: index,\r\n                name: name,\r\n                pos: position,\r\n                team: pTeam,\r\n                val: value,\r\n                pts: points,\r\n                min: minutes,\r\n                gscored: gs,\r\n                assist: assist,\r\n                penmiss: pMiss,\r\n                saves: saves,\r\n                gconcede: gc,\r\n                owngoal: og,\r\n                yellow: yc,\r\n                ptpergame: ptsgame,\r\n                gspergame: gsgame,\r\n                apergame: agame,\r\n                gstoassist: gsaratio\r\n            }\r\n        })\r\n        return tempTable.sort(aSort)\r\n    } else if (sortSavesData === true) {\r\n        let tempTable = playerData.map((data, index) => {\r\n            let name = data.web_name\r\n            let position = mapPos(data.element_type)\r\n            let pTeam = mapTeam(data.team)\r\n            let value = data.now_cost/10        \r\n            let points = data.total_points\r\n            let minutes = data.minutes\r\n            let gs = data.goals_scored\r\n            let assist = data.assists\r\n            let pMiss = data.penalties_missed\r\n            let saves = data.saves\r\n            let gc = data.goals_conceded\r\n            let og = data.own_goals\r\n            let yc = data.yellow_cards       \r\n            let ptsgame = (data.total_points/38).toFixed(2)\r\n            let gsgame = (data.goals_scored/38).toFixed(2)\r\n            let agame = (data.assists/38).toFixed(2)\r\n            let gsaratio = ((data.goals_scored+data.assists)/38).toFixed(2)\r\n    \r\n            console.log(sortSavesData);\r\n    \r\n            return {\r\n                key: index,\r\n                name: name,\r\n                pos: position,\r\n                team: pTeam,\r\n                val: value,\r\n                pts: points,\r\n                min: minutes,\r\n                gscored: gs,\r\n                assist: assist,\r\n                penmiss: pMiss,\r\n                saves: saves,\r\n                gconcede: gc,\r\n                owngoal: og,\r\n                yellow: yc,\r\n                ptpergame: ptsgame,\r\n                gspergame: gsgame,\r\n                apergame: agame,\r\n                gstoassist: gsaratio\r\n            }\r\n        })\r\n        return tempTable.sort(saveSort)\r\n    } else {\r\n        return playerData.map((data, index) => {\r\n            let name = data.web_name\r\n            let position = mapPos(data.element_type)\r\n            let pTeam = mapTeam(data.team)\r\n            let value = data.now_cost/10        \r\n            let points = data.total_points\r\n            let minutes = data.minutes\r\n            let gs = data.goals_scored\r\n            let assist = data.assists\r\n            let pMiss = data.penalties_missed\r\n            let saves = data.saves\r\n            let gc = data.goals_conceded\r\n            let og = data.own_goals\r\n            let yc = data.yellow_cards       \r\n            let ptsgame = (data.total_points/38).toFixed(2)\r\n            let gsgame = (data.goals_scored/38).toFixed(2)\r\n            let agame = (data.assists/38).toFixed(2)\r\n            let gsaratio = ((data.goals_scored+data.assists)/38).toFixed(2)\r\n    \r\n            console.log(sortPointData);\r\n    \r\n            return {\r\n                key: index,\r\n                name: name,\r\n                pos: position,\r\n                team: pTeam,\r\n                val: value,\r\n                pts: points,\r\n                min: minutes,\r\n                gscored: gs,\r\n                assist: assist,\r\n                penmiss: pMiss,\r\n                saves: saves,\r\n                gconcede: gc,\r\n                owngoal: og,\r\n                yellow: yc,\r\n                ptpergame: ptsgame,\r\n                gspergame: gsgame,\r\n                apergame: agame,\r\n                gstoassist: gsaratio\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nlet computeStat = (playerTable) => {\r\n    let playerPts = playerTable.map((data) => {\r\n        data.ptpergame = Number(data.ptpergame) || 0\r\n        // data.ptpermin = (Number(data.ptpermin) === 1) ? 0 : data.ptpermin\r\n        return Number(data.ptpergame)\r\n    })\r\n\r\n    let playerG = playerTable.map((data) => {\r\n        data.gspergame = Number(data.gspergame) || 0\r\n        // data.gspermin = (Number(data.gspermin) === 1) ? 0 : data.gspermin\r\n        return Number(data.gspergame)\r\n    })\r\n\r\n    let playerA = playerTable.map((data) => {\r\n        data.apergame = Number(data.apergame) || 0\r\n        // data.apermin = (Number(data.apermin) === 1) ? 0 : data.apermin\r\n        return Number(data.apergame)\r\n    })\r\n\r\n    let playerO = playerTable.map((data) => {\r\n        data.gstoassist = Number(data.gstoassist) || 0\r\n        data.gstoassist = isFinite(Number(data.gstoassist)) ? Number(data.gstoassist) : 0;\r\n        // data.gstoassist = (Number(data.gstoassist) === 1) ? 0 : data.gstoassist\r\n        return Number(data.gstoassist)\r\n    })\r\n\r\n    // get the index of all the min ratios\r\n    let indexPP = playerPts.indexOf(Math.max(...playerPts));\r\n    let indexPG = playerG.indexOf(Math.max(...playerG));\r\n    let indexPA = playerA.indexOf(Math.max(...playerA));\r\n    let indexPO = playerO.indexOf(Math.max(...playerO));\r\n\r\n    // get players corresponding to the indices\r\n    let PP = playerTable[indexPP].name;\r\n    let PG = playerTable[indexPG].name;\r\n    let PA = playerTable[indexPA].name;\r\n    let PO = playerTable[indexPO].name;\r\n    \r\n    return {\r\n        maxPP: Math.max(...playerPts), // note that Math.min works with arrays by ... destructuring\r\n        playerPP: PP,\r\n        maxPG: Math.max(...playerG),\r\n        playerPG: PG,\r\n        maxPA: Math.max(...playerA),\r\n        playerPA: PA, \r\n        maxPO: Math.max(...playerO),\r\n        playerPO: PO\r\n    }\r\n} \r\n\r\n//sort elements would vary, to add separate sorts\r\n//to add view filter by roles to render seperate table, appjs to use role state\r\nconst PlayerList = ({players, sortPts, sortGS, sortA, sortSaves, route}) => {\r\n    \r\n    //Create the table as an object to be passed to Card Component\r\n    let playerTable = computeTable(players, sortPts, sortGS, sortA, sortSaves)\r\n    // console.log(playerTable)\r\n    const playertbHead = ['Name','Pos','Team','Val','Points','Min','GS','A','Pen Missed','Saves','GC','OG','Yellow Cards']\r\n    \r\n    //The array stores name of the analysis perspective to understand team and player impact\r\n    let playerStat = computeStat(playerTable)\r\n    console.log(playerStat)\r\n\r\n    //Rendering the Player table\r\n    return (\r\n        <div className = 'fpl_playerInfo'>\r\n            <div className = 'fpl_playerReport'>\r\n                <div className = 'fpl_playerAtt'>\r\n                    <span><p>{playerStat.playerPP}</p><p>{playerStat.maxPP}</p></span>\r\n                    <span><p>{playerStat.playerPG}</p><p>{playerStat.maxPG}</p></span>\r\n                </div>\r\n                <div className = 'fpl_playerAtt2'>\r\n                    <span><p>{playerStat.playerPA}</p><p>{playerStat.maxPA}</p></span>\r\n                    <span><p>{playerStat.playerPO}</p><p>{playerStat.maxPO}</p></span>\r\n                </div>\r\n            </div>\r\n        <Scroll route = {route}>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th className = 'tb_text'>{playertbHead[0]}</th>\r\n                        <th className = 'tb_text'>{playertbHead[1]}</th>\r\n                        <th className = 'tb_text'>{playertbHead[2]}</th>\r\n                        <th className = 'tb_num'>{playertbHead[3]}</th>\r\n                        <th className = 'tb_num'>{playertbHead[4]}</th>\r\n                        <th className = 'tb_num'>{playertbHead[5]}</th>\r\n                        <th className = 'tb_num'>{playertbHead[6]}</th>\r\n                        <th className = 'tb_num'>{playertbHead[7]}</th>\r\n                        <th className = 'tb_num'>{playertbHead[8]}</th>\r\n                        <th className = 'tb_num'>{playertbHead[9]}</th>\r\n                        <th className = 'tb_num'>{playertbHead[10]}</th>\r\n                        <th className = 'tb_num'>{playertbHead[11]}</th>\r\n                        <th className = 'tb_num'>{playertbHead[12]}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>  \r\n                    <Player playerData = {playerTable} />\r\n                </tbody>\r\n            </table>\r\n        </Scroll>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerList;","export default __webpack_public_path__ + \"static/media/4_fplLogo.9958ef9b.svg\";","import React from 'react';\r\nimport Icon from './4_fplLogo.svg';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div>\r\n            <img alt = 'logo' src = {Icon}/> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport Logo from '../Logo/Logo';\r\n\r\nimport './Navigation.css';\r\n\r\nconst Navigation = ({route, onRouteChange}) => {\r\n        return (\r\n            (route === 'club') ?\r\n            <div className = 'nav_container'>\r\n                <div className = 'nav_logo'>\r\n                    <Logo />\r\n                    {/* <h1>FPL</h1> */}\r\n                </div>\r\n                <nav>\r\n                    <p className = 'cl_act'\r\n                    onClick = {() => onRouteChange('club')}>CLUBS</p>\r\n                    <p onClick = {() => onRouteChange('player')}>PLAYERS</p>\r\n                </nav>\r\n            </div>\r\n            :\r\n            <div className = 'nav_container'>\r\n                <div className = 'nav_logo'>\r\n                    <Logo />\r\n                    {/* <h1>FPL</h1> */}\r\n                </div>\r\n                <nav>\r\n                    <p onClick = {() => onRouteChange('club')}>CLUBS</p>\r\n                    <p className = 'pl_act'\r\n                    onClick = {() => onRouteChange('player')}>PLAYERS</p>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n\r\nexport default Navigation;","import React, { useState, useEffect } from 'react';\nimport ClubList from '../components/ClubList/ClubList';\nimport PlayerList from '../components/PlayerList/PlayerList';\nimport Navigation from '../components/Navigation/Navigation';\n\nimport './App.css';\n\nfunction App () {\n\n  const [clubs, setUsers] = useState([])\n  const [players, setPlayers] = useState([])\n  const [route, setRoute] = useState('club')\n  const [sortPoints, setsortPoints] = useState(false)\n  const [sortCS, setsortCS] = useState(false)\n  const [sortSaves, setsortSaves] = useState(false)\n  const [sortAttR, setsortAttR] = useState(false)\n  const [sortGS, setsortGS] = useState(false)\n  const [sortA, setsortA] = useState(false)\n\n  useEffect(() => {\n      // const url = 'https://cors-anywhere.herokuapp.com/https://fantasy.premierleague.com/api/bootstrap-static/';\n      const url = './fplexperiment/fpl_bootstrap_json.json';\n      fetch(url)\n          .then(response => {\n            console.log(response)\n            return response.json()\n          })\n          .then(userList => {\n            console.log(userList)\n            setUsers(userList.teams)\n            setPlayers(userList.elements)\n          })\n  },[])\n\n  // function to manage sort states - sort onClick to call this function\n  let onRouteChange = (route) => {\n      setRoute(route);\n    } \n  \n  return !clubs.length ? \n      <div>\n        <h1 className = 'f1'>Loading...</h1>\n      </div> :\n  (\n      <div className = 'fpl_container'>\n        <div className = 'fpl_nav'>\n          <Navigation route = {route} onRouteChange = {onRouteChange} />\n        </div>\n        { route === 'club'\n        ?\n        <div className = 'fpl_clubs'>\n          <div className = 'fpl_head'>\n          <h1>CLUBS/</h1>\n          </div>\n          <span className = 'fpl_sort'>\n            <p className = {sortPoints ? \"sort_active\" : \"sort_inactive\"} onClick={() => setsortPoints(!sortPoints)}>Points</p>\n            <p className = {sortCS ? \"sort_active\" : \"sort_inactive\"} onClick={() => setsortCS(!sortCS)}>%CS</p>\n            <p className = {sortSaves ? \"sort_active\" : \"sort_inactive\"} onClick={() => setsortSaves(!sortSaves)}>%Saves</p>\n            <p className = {sortAttR ? \"sort_active\" : \"sort_inactive\"} onClick={() => setsortAttR(!sortAttR)}>AttRatio</p>\n          </span>\n          <ClubList clubs = {clubs} players = {players} sortPts = {sortPoints} sortCS = {sortCS} sortS = {sortSaves} sortAR = {sortAttR} route = {route}/>\n        </div>\n        :\n        <div className = 'fpl_players'>\n          <div className = 'fpl_head'>\n          <h1>PLAYERS/</h1>\n          </div>\n          <span className = 'fpl_sort'>\n            <p className = {sortPoints ? \"sort_active\" : \"sort_inactive\"} onClick={() => setsortPoints(!sortPoints)}>Points</p>\n            <p className = {sortGS ? \"sort_active\" : \"sort_inactive\"} onClick={() => setsortGS(!sortGS)}>GS</p>\n            <p className = {sortA ? \"sort_active\" : \"sort_inactive\"} onClick={() => setsortA(!sortA)}>Assists</p>\n            <p className = {sortSaves ? \"sort_active\" : \"sort_inactive\"} onClick={() => setsortSaves(!sortSaves)}>Saves</p>\n          </span>\n          <PlayerList players = {players} sortPts = {sortPoints} sortGS = {sortGS} sortA = {sortA} sortSaves = {sortSaves} route = {route}/>\n        </div>\n        }\n      </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n<App />,\n\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}